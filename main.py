import kivy
from kivy.app import App
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.button import Button
from kivy.uix.label import Label
from kivy.uix.slider import Slider
from kivy.uix.spinner import Spinner
from kivy.uix.switch import Switch
from kivy.uix.progressbar import ProgressBar
from kivy.clock import Clock
from kivy.graphics import Color, Rectangle
import os
import time
import numpy as np

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à –º–æ–¥—É–ª—å
from audio_processor import AudioProcessor

class SignalLevelIndicator(BoxLayout):
    """–í–∏–¥–∂–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è —Å–∏–≥–Ω–∞–ª–∞"""
    def __init__(self, **kwargs):
        super(SignalLevelIndicator, self).__init__(**kwargs)
        self.orientation = 'vertical'
        self.size_hint_y = None
        self.height = 50
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self.add_widget(Label(
            text='–£—Ä–æ–≤–µ–Ω—å —Å–∏–≥–Ω–∞–ª–∞',
            size_hint_y=None,
            height=20
        ))
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
        self.indicator_container = BoxLayout(
            orientation='horizontal',
            size_hint_y=None,
            height=30
        )
        self.add_widget(self.indicator_container)
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —É—Ä–æ–≤–Ω—è
        with self.indicator_container.canvas:
            Color(0.2, 0.2, 0.2, 1)
            self.background = Rectangle(pos=self.indicator_container.pos, 
                                       size=self.indicator_container.size)
            self.indicator_color = Color(0.0, 0.7, 0.0, 1)
            self.indicator = Rectangle(pos=self.indicator_container.pos, 
                                      size=(0, self.indicator_container.height))
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∏ —Ä–∞–∑–º–µ—Ä–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –≤–∏–¥–∂–µ—Ç–∞
        self.indicator_container.bind(pos=self.update_rect, size=self.update_rect)
    
    def update_rect(self, instance, value):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∏ —Ä–∞–∑–º–µ—Ä–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞"""
        self.background.pos = instance.pos
        self.background.size = instance.size
        self.indicator.pos = instance.pos
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —à–∏—Ä–∏–Ω—É, –≤—ã—Å–æ—Ç–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–µ–π
        self.indicator.size = (self.indicator.size[0], instance.height)
    
    def set_level(self, level):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Ä–æ–≤–Ω—è —Å–∏–≥–Ω–∞–ª–∞ (0.0 - 1.0)"""
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –æ—Ç 0 –¥–æ 1
        level = max(0.0, min(1.0, level))
        
        # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –¥–ª—è –ª—É—á—à–µ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ (–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∞—è —à–∫–∞–ª–∞)
        if level > 0:
            scaled_level = 0.2 + 0.8 * (np.log10(1 + 9 * level))
        else:
            scaled_level = 0
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —à–∏—Ä–∏–Ω—É –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
        self.indicator.size = (scaled_level * self.indicator_container.width, 
                              self.indicator_container.height)
        
        # –ú–µ–Ω—è–µ–º —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è
        if level < 0.3:
            # –ó–µ–ª–µ–Ω—ã–π –¥–ª—è –Ω–∏–∑–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è
            self.indicator_color.rgb = (0.0, 0.7, 0.0)
        elif level < 0.7:
            # –ñ–µ–ª—Ç—ã–π –¥–ª—è —Å—Ä–µ–¥–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è
            self.indicator_color.rgb = (0.7, 0.7, 0.0)
        else:
            # –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –≤—ã—Å–æ–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è
            self.indicator_color.rgb = (0.7, 0.0, 0.0)

class GuitarMonitorWidget(BoxLayout):
    def __init__(self, **kwargs):
        super(GuitarMonitorWidget, self).__init__(**kwargs)
        self.orientation = 'vertical'
        self.padding = 20
        self.spacing = 10
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self.add_widget(Label(
            text='üé∏ Guitar Sound Monitor',
            font_size='24sp',
            size_hint_y=None,
            height=50
        ))
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —É—Ä–æ–≤–Ω—è —Å–∏–≥–Ω–∞–ª–∞
        self.signal_indicator = SignalLevelIndicator()
        self.add_widget(self.signal_indicator)
        
        # –í—ã–±–æ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤–≤–æ–¥–∞
        input_device_layout = BoxLayout(orientation='horizontal', size_hint_y=None, height=50)
        input_device_layout.add_widget(Label(text='–í—Ö–æ–¥:', size_hint_x=0.3))
        
        self.input_device_spinner = Spinner(text='–í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ', size_hint_x=0.7)
        self.input_device_spinner.bind(text=self.on_input_device_selected)
        input_device_layout.add_widget(self.input_device_spinner)
        
        self.add_widget(input_device_layout)
        
        # –í—ã–±–æ—Ä –∫–∞–Ω–∞–ª–∞ –≤–≤–æ–¥–∞
        input_channel_layout = BoxLayout(orientation='horizontal', size_hint_y=None, height=50)
        input_channel_layout.add_widget(Label(text='–ö–∞–Ω–∞–ª:', size_hint_x=0.3))
        
        self.input_channel_spinner = Spinner(text='–ö–∞–Ω–∞–ª 1', size_hint_x=0.7)
        self.input_channel_spinner.bind(text=self.on_input_channel_selected)
        input_channel_layout.add_widget(self.input_channel_spinner)
        
        self.add_widget(input_channel_layout)
        
        # –í—ã–±–æ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤—ã–≤–æ–¥–∞
        output_device_layout = BoxLayout(orientation='horizontal', size_hint_y=None, height=50)
        output_device_layout.add_widget(Label(text='–í—ã—Ö–æ–¥:', size_hint_x=0.3))
        
        self.output_device_spinner = Spinner(text='–í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ', size_hint_x=0.7)
        self.output_device_spinner.bind(text=self.on_output_device_selected)
        output_device_layout.add_widget(self.output_device_spinner)
        
        self.add_widget(output_device_layout)
        
        # –†–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞ (–¥–ª—è –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–¥–µ—Ä–∂–∫–∏)
        buffer_size_layout = BoxLayout(orientation='horizontal', size_hint_y=None, height=50)
        buffer_size_layout.add_widget(Label(text='–†–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞:', size_hint_x=0.3))
        
        self.buffer_size_spinner = Spinner(
            text='128',
            values=['64', '128', '256', '512', '1024'],
            size_hint_x=0.7
        )
        self.buffer_size_spinner.bind(text=self.on_buffer_size_selected)
        buffer_size_layout.add_widget(self.buffer_size_spinner)
        
        self.add_widget(buffer_size_layout)
        
        # –†–µ–∂–∏–º –Ω–∏–∑–∫–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
        low_latency_layout = BoxLayout(orientation='horizontal', size_hint_y=None, height=50)
        low_latency_layout.add_widget(Label(text='–ù–∏–∑–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞:', size_hint_x=0.3))
        
        self.low_latency_switch = Switch(active=True, size_hint_x=0.2)
        self.low_latency_switch.bind(active=self.on_low_latency_toggle)
        low_latency_layout.add_widget(self.low_latency_switch)
        
        self.low_latency_label = Label(text='–í–∫–ª', size_hint_x=0.5)
        low_latency_layout.add_widget(self.low_latency_label)
        
        self.add_widget(low_latency_layout)
        
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–≤—É–∫–∞
        monitoring_layout = BoxLayout(orientation='horizontal', size_hint_y=None, height=50)
        monitoring_layout.add_widget(Label(text='–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:', size_hint_x=0.3))
        
        self.monitoring_switch = Switch(active=False, size_hint_x=0.2)
        self.monitoring_switch.bind(active=self.on_monitoring_toggle)
        monitoring_layout.add_widget(self.monitoring_switch)
        
        self.monitoring_label = Label(text='–í—ã–∫–ª', size_hint_x=0.5)
        monitoring_layout.add_widget(self.monitoring_label)
        
        self.add_widget(monitoring_layout)
        
        # –ì—Ä–æ–º–∫–æ—Å—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        volume_layout = BoxLayout(orientation='horizontal', size_hint_y=None, height=50)
        volume_layout.add_widget(Label(text='–ì—Ä–æ–º–∫–æ—Å—Ç—å:', size_hint_x=0.3))
        
        self.volume_slider = Slider(min=0.0, max=1.0, value=1.0, size_hint_x=0.5)
        self.volume_slider.bind(value=self.on_volume_change)
        volume_layout.add_widget(self.volume_slider)
        
        self.volume_label = Label(text='100%', size_hint_x=0.2)
        volume_layout.add_widget(self.volume_label)
        
        self.add_widget(volume_layout)
        
        # –ü–æ—Ä–æ–≥ –≥—Ä–æ–º–∫–æ—Å—Ç–∏
        threshold_layout = BoxLayout(orientation='horizontal', size_hint_y=None, height=50)
        threshold_layout.add_widget(Label(text='–ü–æ—Ä–æ–≥:', size_hint_x=0.3))
        
        self.threshold_slider = Slider(min=0.01, max=0.5, value=0.1, size_hint_x=0.5)
        self.threshold_slider.bind(value=self.on_threshold_change)
        threshold_layout.add_widget(self.threshold_slider)
        
        self.threshold_label = Label(text='0.10', size_hint_x=0.2)
        threshold_layout.add_widget(self.threshold_label)
        
        self.add_widget(threshold_layout)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        controls_layout = BoxLayout(orientation='horizontal', size_hint_y=None, height=50)
        
        self.start_button = Button(text='–°—Ç–∞—Ä—Ç', size_hint_x=0.5)
        self.start_button.bind(on_press=self.toggle_monitor)
        controls_layout.add_widget(self.start_button)
        
        self.add_widget(controls_layout)
        
        # –°—Ç–∞—Ç—É—Å
        self.status_label = Label(
            text='–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ',
            size_hint_y=None,
            height=30
        )
        self.add_widget(self.status_label)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∞—É–¥–∏–æ
        self.audio_processor = AudioProcessor(callback=self.on_audio_detected)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        self.update_device_lists()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞—É–¥–∏–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è —Å–∏–≥–Ω–∞–ª–∞
        self.audio_processor.start()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Å–∏–≥–Ω–∞–ª–∞
        Clock.schedule_interval(self.update_signal_level, 0.05)
    
    def update_signal_level(self, dt):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Å–∏–≥–Ω–∞–ª–∞"""
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å —Å–∏–≥–Ω–∞–ª–∞ –æ—Ç –∞—É–¥–∏–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
        if hasattr(self.audio_processor, 'last_rms'):
            level = self.audio_processor.last_rms
            self.signal_indicator.set_level(level)
    
    def update_device_lists(self, *args):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤–≤–æ–¥–∞/–≤—ã–≤–æ–¥–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤–≤–æ–¥–∞
            self.input_devices = self.audio_processor.get_input_devices()
            
            if self.input_devices:
                # –ó–∞–ø–æ–ª–Ω—è–µ–º –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤–≤–æ–¥–∞
                device_names = [device['name'] for device in self.input_devices]
                self.input_device_spinner.values = device_names
                
                # –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                if self.input_device_spinner.text == '–í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ':
                    self.input_device_spinner.text = device_names[0]
                    self.on_input_device_selected(self.input_device_spinner, device_names[0])
            else:
                self.status_label.text = '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤–≤–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'
        except Exception as e:
            self.status_label.text = f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤–≤–æ–¥–∞: {str(e)}'
            
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤—ã–≤–æ–¥–∞
            self.output_devices = self.audio_processor.get_output_devices()
            
            if self.output_devices:
                # –ó–∞–ø–æ–ª–Ω—è–µ–º –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤—ã–≤–æ–¥–∞
                device_names = [device['name'] for device in self.output_devices]
                self.output_device_spinner.values = device_names
                
                # –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                if self.output_device_spinner.text == '–í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ':
                    self.output_device_spinner.text = device_names[0]
                    self.on_output_device_selected(self.output_device_spinner, device_names[0])
            else:
                self.status_label.text = '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤—ã–≤–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'
        except Exception as e:
            self.status_label.text = f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤—ã–≤–æ–¥–∞: {str(e)}'
    
    def on_input_device_selected(self, spinner, text):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤–≤–æ–¥–∞"""
        try:
            # –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
            selected_device = next((device for device in self.input_devices if device['name'] == text), None)
            
            if selected_device:
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤
                num_channels = selected_device['maxInputChannels']
                print(f"–í—ã–±—Ä–∞–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {text} —Å {num_channels} –≤—Ö–æ–¥–Ω—ã–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
                channel_values = [f'–ö–∞–Ω–∞–ª {i+1}' for i in range(num_channels)]
                self.input_channel_spinner.values = channel_values
                
                # –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π –∫–∞–Ω–∞–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                if not self.input_channel_spinner.text in channel_values:
                    self.input_channel_spinner.text = channel_values[0]
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤–≤–æ–¥–∞
                self.audio_processor.set_input_device(selected_device['index'])
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                self.status_label.text = f'–í—ã–±—Ä–∞–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤–≤–æ–¥–∞: {text}'
        except Exception as e:
            self.status_label.text = f'–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤–≤–æ–¥–∞: {str(e)}'
    
    def on_output_device_selected(self, spinner, text):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤—ã–≤–æ–¥–∞"""
        try:
            # –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
            selected_device = next((device for device in self.output_devices if device['name'] == text), None)
            
            if selected_device:
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤—ã–≤–æ–¥–∞
                self.audio_processor.set_output_device(selected_device['index'])
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                self.status_label.text = f'–í—ã–±—Ä–∞–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤—ã–≤–æ–¥–∞: {text}'
        except Exception as e:
            self.status_label.text = f'–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤—ã–≤–æ–¥–∞: {str(e)}'
    
    def on_input_channel_selected(self, spinner, text):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞ –≤–≤–æ–¥–∞"""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –∫–∞–Ω–∞–ª–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ö–∞–Ω–∞–ª 1" -> 0)
            channel = int(text.split(' ')[1]) - 1
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–Ω–∞–ª –≤–≤–æ–¥–∞
            self.audio_processor.set_input_channel(channel)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            self.status_label.text = f'–í—ã–±—Ä–∞–Ω –∫–∞–Ω–∞–ª: {text}'
        except Exception as e:
            self.status_label.text = f'–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞: {str(e)}'
    
    def on_buffer_size_selected(self, spinner, text):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞ –±—É—Ñ–µ—Ä–∞"""
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–∫—Å—Ç –≤ —á–∏—Å–ª–æ
            buffer_size = int(text)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞
            self.audio_processor.set_buffer_size(buffer_size)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            self.status_label.text = f'–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞: {buffer_size}'
        except Exception as e:
            self.status_label.text = f'–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ –±—É—Ñ–µ—Ä–∞: {str(e)}'
    
    def on_low_latency_toggle(self, switch, value):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –Ω–∏–∑–∫–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏"""
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º –Ω–∏–∑–∫–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
            self.audio_processor.set_low_latency(value)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
            self.low_latency_label.text = '–í–∫–ª' if value else '–í—ã–∫–ª'
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            self.status_label.text = f'–†–µ–∂–∏–º –Ω–∏–∑–∫–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏: {"–≤–∫–ª—é—á–µ–Ω" if value else "–≤—ã–∫–ª—é—á–µ–Ω"}'
        except Exception as e:
            self.status_label.text = f'–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞: {str(e)}'
    
    def on_monitoring_toggle(self, switch, value):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            self.audio_processor.set_monitoring(value)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
            self.monitoring_label.text = '–í–∫–ª' if value else '–í—ã–∫–ª'
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            self.status_label.text = f'–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: {"–≤–∫–ª—é—á–µ–Ω" if value else "–≤—ã–∫–ª—é—á–µ–Ω"}'
        except Exception as e:
            self.status_label.text = f'–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {str(e)}'
    
    def on_volume_change(self, slider, value):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥—Ä–æ–º–∫–æ—Å—Ç–∏"""
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å
            self.audio_processor.set_monitoring_volume(value)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö)
            self.volume_label.text = f'{int(value * 100)}%'
        except Exception as e:
            self.status_label.text = f'–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥—Ä–æ–º–∫–æ—Å—Ç–∏: {str(e)}'
    
    def on_threshold_change(self, slider, value):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä–æ–≥–∞ –≥—Ä–æ–º–∫–æ—Å—Ç–∏"""
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ä–æ–≥
            self.audio_processor.set_threshold(value)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç (—Å –¥–≤—É–º—è –∑–Ω–∞–∫–∞–º–∏ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π)
            self.threshold_label.text = f'{value:.2f}'
        except Exception as e:
            self.status_label.text = f'–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ—Ä–æ–≥–∞: {str(e)}'
    
    def toggle_monitor(self, instance):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        if self.audio_processor.is_running:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
            self.audio_processor.stop()
            self.start_button.text = '–°—Ç–∞—Ä—Ç'
            self.status_label.text = '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'
        else:
            # –ó–∞–ø—É—Å–∫–∞–µ–º
            self.audio_processor.start()
            self.start_button.text = '–°—Ç–æ–ø'
            self.status_label.text = '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω'
    
    def on_audio_detected(self, timestamp, rms_value):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∑–≤—É–∫–∞"""
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        self.status_label.text = f'–û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–≤—É–∫: RMS={rms_value:.4f}'
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–≤—É–∫–∞
        print(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–≤—É–∫: RMS={rms_value:.4f}, –≤—Ä–µ–º—è={timestamp:.2f}")

class GuitarMonitorApp(App):
    def build(self):
        return GuitarMonitorWidget()

if __name__ == '__main__':
    GuitarMonitorApp().run() 