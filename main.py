import kivy
from kivy.app import App
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.button import Button
from kivy.uix.label import Label
from kivy.uix.slider import Slider
from kivy.uix.spinner import Spinner
from kivy.clock import Clock
from kivy.core.audio import SoundLoader
from kivy.graphics import Color, Ellipse, Rectangle
from kivy.properties import NumericProperty, ListProperty
import os
import time

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
from audio_processor import AudioProcessor
from rhythm_analyzer import RhythmAnalyzer

class RhythmVisualizer(BoxLayout):
    """–í–∏–¥–∂–µ—Ç –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–∏—Ç–º–∞"""
    beat_color = ListProperty([0.5, 0.5, 0.5, 1])
    beat_size = NumericProperty(30)
    
    def __init__(self, **kwargs):
        super(RhythmVisualizer, self).__init__(**kwargs)
        self.orientation = 'horizontal'
        self.size_hint_y = None
        self.height = 100
        self.beat_positions = []
        self.current_beat = 0
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        Clock.schedule_interval(self.update, 1/30)
    
    def set_beats(self, num_beats):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É–¥–∞—Ä–æ–≤"""
        self.beat_positions = []
        for i in range(num_beats):
            self.beat_positions.append(i / num_beats)
    
    def update(self, dt):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏"""
        self.canvas.clear()
        
        # –†–∏—Å—É–µ–º —Ñ–æ–Ω
        with self.canvas:
            Color(0.2, 0.2, 0.2, 1)
            Rectangle(pos=self.pos, size=self.size)
        
        # –†–∏—Å—É–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Ä–∏—Ç–º–∞
        for i, pos in enumerate(self.beat_positions):
            x = self.pos[0] + pos * self.width
            y = self.pos[1] + self.height / 2
            
            with self.canvas:
                if i == self.current_beat:
                    Color(1, 0, 0, 1)  # –¢–µ–∫—É—â–∏–π —É–¥–∞—Ä - –∫—Ä–∞—Å–Ω—ã–π
                else:
                    Color(0.5, 0.5, 0.5, 1)  # –û—Å—Ç–∞–ª—å–Ω—ã–µ - —Å–µ—Ä—ã–µ
                
                Ellipse(pos=(x - self.beat_size/2, y - self.beat_size/2), 
                        size=(self.beat_size, self.beat_size))
    
    def set_current_beat(self, beat_index):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —É–¥–∞—Ä–∞"""
        self.current_beat = beat_index % len(self.beat_positions) if self.beat_positions else 0

class FeedbackIndicator(BoxLayout):
    """–í–∏–¥–∂–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
    feedback_color = ListProperty([0.5, 0.5, 0.5, 1])
    
    def __init__(self, **kwargs):
        super(FeedbackIndicator, self).__init__(**kwargs)
        self.size_hint_y = None
        self.height = 50
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        Clock.schedule_interval(self.update, 1/30)
    
    def set_feedback(self, is_accurate):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
        if is_accurate:
            self.feedback_color = [0, 1, 0, 1]  # –ó–µ–ª–µ–Ω—ã–π - —Ç–æ—á–Ω–æ–µ –ø–æ–ø–∞–¥–∞–Ω–∏–µ
        else:
            self.feedback_color = [1, 0, 0, 1]  # –ö—Ä–∞—Å–Ω—ã–π - –Ω–µ—Ç–æ—á–Ω–æ–µ –ø–æ–ø–∞–¥–∞–Ω–∏–µ
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ü–≤–µ—Ç —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
        Clock.schedule_once(self.reset_color, 0.5)
    
    def reset_color(self, dt):
        """–°–±—Ä–æ—Å —Ü–≤–µ—Ç–∞"""
        self.feedback_color = [0.5, 0.5, 0.5, 1]
    
    def update(self, dt):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏"""
        self.canvas.clear()
        with self.canvas:
            Color(*self.feedback_color)
            Rectangle(pos=self.pos, size=self.size)

class MetronomeWidget(BoxLayout):
    def __init__(self, **kwargs):
        super(MetronomeWidget, self).__init__(**kwargs)
        self.orientation = 'vertical'
        self.padding = 20
        self.spacing = 10
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self.add_widget(Label(
            text='üé∏ Guitar Rhythm Trainer',
            font_size='24sp',
            size_hint_y=None,
            height=50
        ))
        
        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∏—Ç–º–∞
        self.rhythm_visualizer = RhythmVisualizer()
        self.rhythm_visualizer.set_beats(4)  # 4 —É–¥–∞—Ä–∞ –≤ —Ç–∞–∫—Ç–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.add_widget(self.rhythm_visualizer)
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
        self.feedback_indicator = FeedbackIndicator()
        self.add_widget(self.feedback_indicator)
        
        # –ö–æ–Ω—Ç—Ä–æ–ª—å —Ç–µ–º–ø–∞
        tempo_layout = BoxLayout(orientation='horizontal', size_hint_y=None, height=50)
        tempo_layout.add_widget(Label(text='–¢–µ–º–ø (BPM):', size_hint_x=0.3))
        
        self.tempo_slider = Slider(min=40, max=220, value=80, size_hint_x=0.5)
        self.tempo_slider.bind(value=self.on_tempo_change)
        tempo_layout.add_widget(self.tempo_slider)
        
        self.tempo_label = Label(text='80', size_hint_x=0.2)
        tempo_layout.add_widget(self.tempo_label)
        
        self.add_widget(tempo_layout)
        
        # –í—ã–±–æ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤–≤–æ–¥–∞
        device_layout = BoxLayout(orientation='horizontal', size_hint_y=None, height=50)
        device_layout.add_widget(Label(text='–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:', size_hint_x=0.3))
        
        self.device_spinner = Spinner(text='–í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ', size_hint_x=0.7)
        self.device_spinner.bind(text=self.on_device_selected)
        device_layout.add_widget(self.device_spinner)
        
        self.add_widget(device_layout)
        
        # –ü–æ—Ä–æ–≥ –≥—Ä–æ–º–∫–æ—Å—Ç–∏
        threshold_layout = BoxLayout(orientation='horizontal', size_hint_y=None, height=50)
        threshold_layout.add_widget(Label(text='–ü–æ—Ä–æ–≥:', size_hint_x=0.3))
        
        self.threshold_slider = Slider(min=0.01, max=0.5, value=0.1, size_hint_x=0.5)
        self.threshold_slider.bind(value=self.on_threshold_change)
        threshold_layout.add_widget(self.threshold_slider)
        
        self.threshold_label = Label(text='0.10', size_hint_x=0.2)
        threshold_layout.add_widget(self.threshold_label)
        
        self.add_widget(threshold_layout)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        controls_layout = BoxLayout(orientation='horizontal', size_hint_y=None, height=50)
        
        self.start_button = Button(text='–°—Ç–∞—Ä—Ç', size_hint_x=0.5)
        self.start_button.bind(on_press=self.toggle_trainer)
        controls_layout.add_widget(self.start_button)
        
        self.add_widget(controls_layout)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats_label = Label(
            text='–¢–æ—á–Ω–æ—Å—Ç—å: 0%',
            size_hint_y=None,
            height=30
        )
        self.add_widget(self.stats_label)
        
        # –°—Ç–∞—Ç—É—Å
        self.status_label = Label(
            text='–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ',
            size_hint_y=None,
            height=30
        )
        self.add_widget(self.status_label)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Ç—Ä–æ–Ω–æ–º–∞
        self.is_playing = False
        self.tempo = 80  # BPM
        self.beat_event = None
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∑–≤—É–∫–∞ –º–µ—Ç—Ä–æ–Ω–æ–º–∞
        self.click_sound = None
        try:
            # –ü–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –∑–≤—É–∫
            sound_file = os.path.join(os.path.dirname(__file__), 'click.wav')
            if os.path.exists(sound_file):
                self.click_sound = SoundLoader.load(sound_file)
            else:
                self.status_label.text = '–ó–≤—É–∫ –º–µ—Ç—Ä–æ–Ω–æ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω'
        except Exception as e:
            self.status_label.text = f'–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–≤—É–∫–∞: {str(e)}'
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∞—É–¥–∏–æ –∏ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Ä–∏—Ç–º–∞
        self.audio_processor = AudioProcessor(callback=self.on_audio_detected)
        self.rhythm_analyzer = RhythmAnalyzer(tolerance=0.1)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        self.update_device_list()
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        Clock.schedule_interval(self.update_stats, 1.0)
    
    def update_device_list(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤–≤–æ–¥–∞"""
        try:
            devices = self.audio_processor.get_input_devices()
            device_names = [f"{i}: {d['name']}" for i, d in enumerate(devices)]
            
            if device_names:
                self.device_spinner.values = device_names
                self.device_spinner.text = device_names[0]
            else:
                self.device_spinner.values = ['–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤']
                self.device_spinner.text = '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤'
        except Exception as e:
            self.status_label.text = f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {str(e)}'
    
    def on_device_selected(self, instance, text):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤–≤–æ–¥–∞"""
        if text.startswith('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤'):
            return
        
        try:
            device_id = int(text.split(':')[0])
            self.audio_processor.set_device(device_id)
            self.status_label.text = f'–í—ã–±—Ä–∞–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {text}'
        except Exception as e:
            self.status_label.text = f'–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {str(e)}'
    
    def on_tempo_change(self, instance, value):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º–ø–∞"""
        self.tempo = int(value)
        self.tempo_label.text = str(self.tempo)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–º–ø –≤ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–µ —Ä–∏—Ç–º–∞
        self.rhythm_analyzer.set_tempo(self.tempo)
        
        # –ï—Å–ª–∏ –º–µ—Ç—Ä–æ–Ω–æ–º –∏–≥—Ä–∞–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
        if self.is_playing:
            self.stop_metronome()
            self.start_metronome()
    
    def on_threshold_change(self, instance, value):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä–æ–≥–∞ –≥—Ä–æ–º–∫–æ—Å—Ç–∏"""
        threshold = round(value, 2)
        self.threshold_label.text = f'{threshold:.2f}'
        self.audio_processor.set_threshold(threshold)
    
    def toggle_trainer(self, instance):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç—Ä–µ–Ω–∞–∂–µ—Ä–∞"""
        if self.is_playing:
            self.stop_trainer()
            self.start_button.text = '–°—Ç–∞—Ä—Ç'
        else:
            self.start_trainer()
            self.start_button.text = '–°—Ç–æ–ø'
    
    def start_trainer(self):
        """–ó–∞–ø—É—Å–∫ —Ç—Ä–µ–Ω–∞–∂–µ—Ä–∞"""
        self.is_playing = True
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–µ—Ç—Ä–æ–Ω–æ–º
        self.start_metronome()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ä–∏—Ç–º–∞
        self.rhythm_analyzer.start()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞—É–¥–∏–æ
        self.audio_processor.start()
        
        self.status_label.text = f'–¢—Ä–µ–Ω–∞–∂–µ—Ä –∑–∞–ø—É—â–µ–Ω: {self.tempo} BPM'
    
    def stop_trainer(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç—Ä–µ–Ω–∞–∂–µ—Ä–∞"""
        self.is_playing = False
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ—Ç—Ä–æ–Ω–æ–º
        self.stop_metronome()
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ä–∏—Ç–º–∞
        self.rhythm_analyzer.stop()
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞—É–¥–∏–æ
        self.audio_processor.stop()
        
        self.status_label.text = '–¢—Ä–µ–Ω–∞–∂–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'
    
    def start_metronome(self):
        """–ó–∞–ø—É—Å–∫ –º–µ—Ç—Ä–æ–Ω–æ–º–∞"""
        interval = 60.0 / self.tempo  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –º–µ–∂–¥—É —É–¥–∞—Ä–∞–º–∏
        self.beat_event = Clock.schedule_interval(self.beat, interval)
    
    def stop_metronome(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ—Ç—Ä–æ–Ω–æ–º–∞"""
        if self.beat_event:
            self.beat_event.cancel()
    
    def beat(self, dt):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞—Ä–∞ –º–µ—Ç—Ä–æ–Ω–æ–º–∞"""
        # –í–∏–∑—É–∞–ª—å–Ω–∞—è –∏–Ω–¥–∏–∫–∞—Ü–∏—è
        current_beat = (self.rhythm_visualizer.current_beat + 1) % 4
        self.rhythm_visualizer.set_current_beat(current_beat)
        
        # –ó–≤—É–∫–æ–≤–∞—è –∏–Ω–¥–∏–∫–∞—Ü–∏—è
        if self.click_sound:
            self.click_sound.play()
    
    def on_audio_detected(self, timestamp, amplitude):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∑–≤—É–∫–∞ —Å –≥–∏—Ç–∞—Ä—ã"""
        if not self.is_playing:
            return
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ø–∞–¥–∞–Ω–∏–µ –≤ —Ä–∏—Ç–º
        is_accurate, deviation = self.rhythm_analyzer.analyze_hit(timestamp)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
        self.feedback_indicator.set_feedback(is_accurate)
    
    def update_stats(self, dt):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        if not self.is_playing:
            return
        
        stats = self.rhythm_analyzer.get_stats()
        accuracy = stats['accuracy'] * 100
        
        self.stats_label.text = f"–¢–æ—á–Ω–æ—Å—Ç—å: {accuracy:.1f}% ({stats['accurate_hits']}/{stats['total_hits']})"

class GuitarTrainerApp(App):
    def build(self):
        return MetronomeWidget()

if __name__ == '__main__':
    GuitarTrainerApp().run() 