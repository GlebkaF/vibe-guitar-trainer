import kivy
from kivy.app import App
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.button import Button
from kivy.uix.label import Label
from kivy.uix.slider import Slider
from kivy.uix.spinner import Spinner
from kivy.uix.switch import Switch
from kivy.uix.progressbar import ProgressBar
from kivy.uix.popup import Popup
from kivy.uix.scrollview import ScrollView
from kivy.uix.floatlayout import FloatLayout
from kivy.uix.relativelayout import RelativeLayout
from kivy.clock import Clock
from kivy.graphics import Color, Rectangle, Line, Ellipse, RoundedRectangle
import os
import time
import numpy as np
import random
import math
import json

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à –º–æ–¥—É–ª—å
from audio_processor import AudioProcessor

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É –≤ —Ä–æ–∫-—Å—Ç–∏–ª–µ
COLORS = {
    'dark': (0.1, 0.1, 0.12, 1),  # –¢–µ–º–Ω—ã–π —Ñ–æ–Ω
    'background': (0.15, 0.15, 0.18, 1),  # –§–æ–Ω —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    'primary': (0.9, 0.3, 0.1, 1),  # –û–≥–Ω–µ–Ω–Ω–æ-–æ—Ä–∞–Ω–∂–µ–≤—ã–π
    'secondary': (0.5, 0.1, 0.5, 1),  # –ü—É—Ä–ø—É—Ä–Ω—ã–π
    'accent': (0.9, 0.1, 0.5, 1),  # –†–æ–∑–æ–≤—ã–π
    'text': (0.9, 0.9, 0.9, 1),  # –ë–µ–ª—ã–π —Ç–µ–∫—Å—Ç
    'highlight': (1.0, 0.8, 0.0, 1)  # –ñ–µ–ª—Ç—ã–π –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è
}

class RockButton(Button):
    """–°—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –≤ —Ä–æ–∫-—Å—Ç–∏–ª–µ"""
    def __init__(self, **kwargs):
        super(RockButton, self).__init__(**kwargs)
        self.background_color = (0, 0, 0, 0)  # –ü—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–π –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
        self.color = COLORS['text']  # –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
        self.border = (0, 0, 0, 0)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º canvas –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞
        self.bind(size=self._update_canvas, pos=self._update_canvas)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º canvas
        with self.canvas.before:
            Color(*COLORS['primary'])
            self.bg_rect = RoundedRectangle(pos=self.pos, size=self.size, radius=[5])
            
            # –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç "—à—É–º–∞" –¥–ª—è —Ç–µ–∫—Å—Ç—É—Ä—ã
            for _ in range(10):
                x = random.randint(0, 100) / 100.0
                y = random.randint(0, 100) / 100.0
                size = random.randint(1, 3) / 100.0
                alpha = random.randint(1, 10) / 20.0
                Color(1, 1, 1, alpha)
                Rectangle(pos=(self.pos[0] + x * self.width, self.pos[1] + y * self.height), 
                          size=(size * self.width, size * self.height))
    
    def _update_canvas(self, instance, value):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ canvas –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞"""
        self.bg_rect.pos = self.pos
        self.bg_rect.size = self.size
    
    def on_press(self):
        """–≠—Ñ—Ñ–µ–∫—Ç –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏"""
        with self.canvas.before:
            Color(*COLORS['secondary'])
            self.bg_rect = RoundedRectangle(pos=self.pos, size=self.size, radius=[5])
    
    def on_release(self):
        """–≠—Ñ—Ñ–µ–∫—Ç –ø—Ä–∏ –æ—Ç–ø—É—Å–∫–∞–Ω–∏–∏"""
        with self.canvas.before:
            Color(*COLORS['primary'])
            self.bg_rect = RoundedRectangle(pos=self.pos, size=self.size, radius=[5])

class RockSlider(Slider):
    """–°—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Å–ª–∞–π–¥–µ—Ä –≤ —Ä–æ–∫-—Å—Ç–∏–ª–µ"""
    def __init__(self, **kwargs):
        super(RockSlider, self).__init__(**kwargs)
        self.cursor_size = (30, 30)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º canvas –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞
        self.bind(size=self._update_canvas, pos=self._update_canvas)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º canvas
        with self.canvas.before:
            # –§–æ–Ω —Å–ª–∞–π–¥–µ—Ä–∞
            Color(*COLORS['background'])
            self.bg_rect = RoundedRectangle(pos=self.pos, size=self.size, radius=[5])
            
            # –ê–∫—Ç–∏–≤–Ω–∞—è —á–∞—Å—Ç—å —Å–ª–∞–π–¥–µ—Ä–∞
            Color(*COLORS['primary'])
            self.active_rect = RoundedRectangle(
                pos=self.pos, 
                size=(self.value_pos[0] - self.pos[0], self.height), 
                radius=[5]
            )
    
    def _update_canvas(self, instance, value):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ canvas –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞"""
        self.bg_rect.pos = self.pos
        self.bg_rect.size = self.size
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —á–∞—Å—Ç—å —Å–ª–∞–π–¥–µ—Ä–∞
        self.active_rect.pos = self.pos
        self.active_rect.size = (self.value_pos[0] - self.pos[0], self.height)
    
    def on_value(self, instance, value):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π —á–∞—Å—Ç–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∑–Ω–∞—á–µ–Ω–∏—è"""
        if hasattr(self, 'active_rect'):
            self.active_rect.size = (self.value_pos[0] - self.pos[0], self.height)

class SignalLevelIndicator(BoxLayout):
    """–í–∏–¥–∂–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è —Å–∏–≥–Ω–∞–ª–∞"""
    def __init__(self, **kwargs):
        super(SignalLevelIndicator, self).__init__(**kwargs)
        self.orientation = 'vertical'
        self.size_hint_y = None
        self.height = 50
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self.add_widget(Label(
            text='–£—Ä–æ–≤–µ–Ω—å —Å–∏–≥–Ω–∞–ª–∞',
            size_hint_y=None,
            height=20
        ))
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
        self.indicator_container = BoxLayout(
            orientation='horizontal',
            size_hint_y=None,
            height=30
        )
        self.add_widget(self.indicator_container)
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —É—Ä–æ–≤–Ω—è
        with self.indicator_container.canvas:
            Color(0.2, 0.2, 0.2, 1)
            self.background = Rectangle(pos=self.indicator_container.pos, 
                                       size=self.indicator_container.size)
            self.indicator_color = Color(0.0, 0.7, 0.0, 1)
            self.indicator = Rectangle(pos=self.indicator_container.pos, 
                                      size=(0, self.indicator_container.height))
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∏ —Ä–∞–∑–º–µ—Ä–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –≤–∏–¥–∂–µ—Ç–∞
        self.indicator_container.bind(pos=self.update_rect, size=self.update_rect)
    
    def update_rect(self, instance, value):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∏ —Ä–∞–∑–º–µ—Ä–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞"""
        self.background.pos = instance.pos
        self.background.size = instance.size
        self.indicator.pos = instance.pos
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —à–∏—Ä–∏–Ω—É, –≤—ã—Å–æ—Ç–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–µ–π
        self.indicator.size = (self.indicator.size[0], instance.height)
    
    def set_level(self, level):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Ä–æ–≤–Ω—è —Å–∏–≥–Ω–∞–ª–∞ (0.0 - 1.0)"""
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –æ—Ç 0 –¥–æ 1
        level = max(0.0, min(1.0, level))
        
        # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –¥–ª—è –ª—É—á—à–µ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ (–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∞—è —à–∫–∞–ª–∞)
        if level > 0:
            scaled_level = 0.2 + 0.8 * (np.log10(1 + 9 * level))
        else:
            scaled_level = 0
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —à–∏—Ä–∏–Ω—É –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
        self.indicator.size = (scaled_level * self.indicator_container.width, 
                              self.indicator_container.height)
        
        # –ú–µ–Ω—è–µ–º —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è
        if level < 0.3:
            # –ó–µ–ª–µ–Ω—ã–π –¥–ª—è –Ω–∏–∑–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è
            self.indicator_color.rgb = (0.0, 0.7, 0.0)
        elif level < 0.7:
            # –ñ–µ–ª—Ç—ã–π –¥–ª—è —Å—Ä–µ–¥–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è
            self.indicator_color.rgb = (0.7, 0.7, 0.0)
        else:
            # –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –≤—ã—Å–æ–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è
            self.indicator_color.rgb = (0.7, 0.0, 0.0)

class GuitarMonitorWidget(BoxLayout):
    def __init__(self, **kwargs):
        super(GuitarMonitorWidget, self).__init__(**kwargs)
        self.orientation = 'vertical'
        self.padding = 20
        self.spacing = 10
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self.add_widget(Label(
            text='üé∏ Guitar Sound Monitor',
            font_size='24sp',
            size_hint_y=None,
            height=50
        ))
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —É—Ä–æ–≤–Ω—è —Å–∏–≥–Ω–∞–ª–∞
        self.signal_indicator = SignalLevelIndicator()
        self.add_widget(self.signal_indicator)
        
        # –í—ã–±–æ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤–≤–æ–¥–∞
        input_device_layout = BoxLayout(orientation='horizontal', size_hint_y=None, height=50)
        input_device_layout.add_widget(Label(text='–í—Ö–æ–¥:', size_hint_x=0.3))
        
        self.input_device_spinner = Spinner(text='–í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ', size_hint_x=0.7)
        self.input_device_spinner.bind(text=self.on_input_device_selected)
        input_device_layout.add_widget(self.input_device_spinner)
        
        self.add_widget(input_device_layout)
        
        # –í—ã–±–æ—Ä –∫–∞–Ω–∞–ª–∞ –≤–≤–æ–¥–∞
        input_channel_layout = BoxLayout(orientation='horizontal', size_hint_y=None, height=50)
        input_channel_layout.add_widget(Label(text='–ö–∞–Ω–∞–ª:', size_hint_x=0.3))
        
        self.input_channel_spinner = Spinner(text='–ö–∞–Ω–∞–ª 1', size_hint_x=0.7)
        self.input_channel_spinner.bind(text=self.on_input_channel_selected)
        input_channel_layout.add_widget(self.input_channel_spinner)
        
        self.add_widget(input_channel_layout)
        
        # –í—ã–±–æ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤—ã–≤–æ–¥–∞
        output_device_layout = BoxLayout(orientation='horizontal', size_hint_y=None, height=50)
        output_device_layout.add_widget(Label(text='–í—ã—Ö–æ–¥:', size_hint_x=0.3))
        
        self.output_device_spinner = Spinner(text='–í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ', size_hint_x=0.7)
        self.output_device_spinner.bind(text=self.on_output_device_selected)
        output_device_layout.add_widget(self.output_device_spinner)
        
        self.add_widget(output_device_layout)
        
        # –†–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞ (–¥–ª—è –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–¥–µ—Ä–∂–∫–∏)
        buffer_size_layout = BoxLayout(orientation='horizontal', size_hint_y=None, height=50)
        buffer_size_layout.add_widget(Label(text='–†–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞:', size_hint_x=0.3))
        
        self.buffer_size_spinner = Spinner(
            text='128',
            values=['64', '128', '256', '512', '1024'],
            size_hint_x=0.7
        )
        self.buffer_size_spinner.bind(text=self.on_buffer_size_selected)
        buffer_size_layout.add_widget(self.buffer_size_spinner)
        
        self.add_widget(buffer_size_layout)
        
        # –†–µ–∂–∏–º –Ω–∏–∑–∫–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
        low_latency_layout = BoxLayout(orientation='horizontal', size_hint_y=None, height=50)
        low_latency_layout.add_widget(Label(text='–ù–∏–∑–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞:', size_hint_x=0.3))
        
        self.low_latency_switch = Switch(active=True, size_hint_x=0.2)
        self.low_latency_switch.bind(active=self.on_low_latency_toggle)
        low_latency_layout.add_widget(self.low_latency_switch)
        
        self.low_latency_label = Label(text='–í–∫–ª', size_hint_x=0.5)
        low_latency_layout.add_widget(self.low_latency_label)
        
        self.add_widget(low_latency_layout)
        
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–≤—É–∫–∞
        monitoring_layout = BoxLayout(orientation='horizontal', size_hint_y=None, height=50)
        monitoring_layout.add_widget(Label(text='–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:', size_hint_x=0.3))
        
        self.monitoring_switch = Switch(active=False, size_hint_x=0.2)
        self.monitoring_switch.bind(active=self.on_monitoring_toggle)
        monitoring_layout.add_widget(self.monitoring_switch)
        
        self.monitoring_label = Label(text='–í—ã–∫–ª', size_hint_x=0.5)
        monitoring_layout.add_widget(self.monitoring_label)
        
        self.add_widget(monitoring_layout)
        
        # –ì—Ä–æ–º–∫–æ—Å—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        volume_layout = BoxLayout(orientation='horizontal', size_hint_y=None, height=50)
        volume_layout.add_widget(Label(text='–ì—Ä–æ–º–∫–æ—Å—Ç—å:', size_hint_x=0.3))
        
        self.volume_slider = Slider(min=0.0, max=1.0, value=1.0, size_hint_x=0.5)
        self.volume_slider.bind(value=self.on_volume_change)
        volume_layout.add_widget(self.volume_slider)
        
        self.volume_label = Label(text='100%', size_hint_x=0.2)
        volume_layout.add_widget(self.volume_label)
        
        self.add_widget(volume_layout)
        
        # –ü–æ—Ä–æ–≥ –≥—Ä–æ–º–∫–æ—Å—Ç–∏
        threshold_layout = BoxLayout(orientation='horizontal', size_hint_y=None, height=50)
        threshold_layout.add_widget(Label(text='–ü–æ—Ä–æ–≥:', size_hint_x=0.3))
        
        self.threshold_slider = Slider(min=0.01, max=0.5, value=0.1, size_hint_x=0.5)
        self.threshold_slider.bind(value=self.on_threshold_change)
        threshold_layout.add_widget(self.threshold_slider)
        
        self.threshold_label = Label(text='0.10', size_hint_x=0.2)
        threshold_layout.add_widget(self.threshold_label)
        
        self.add_widget(threshold_layout)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        controls_layout = BoxLayout(orientation='horizontal', size_hint_y=None, height=50)
        
        self.start_button = Button(text='–°—Ç–∞—Ä—Ç', size_hint_x=0.5)
        self.start_button.bind(on_press=self.toggle_monitor)
        controls_layout.add_widget(self.start_button)
        
        self.add_widget(controls_layout)
        
        # –°—Ç–∞—Ç—É—Å
        self.status_label = Label(
            text='–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ',
            size_hint_y=None,
            height=30
        )
        self.add_widget(self.status_label)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∞—É–¥–∏–æ
        self.audio_processor = AudioProcessor(callback=self.on_audio_detected)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        self.update_device_lists()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞—É–¥–∏–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è —Å–∏–≥–Ω–∞–ª–∞
        self.audio_processor.start()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Å–∏–≥–Ω–∞–ª–∞
        Clock.schedule_interval(self.update_signal_level, 0.05)
    
    def update_signal_level(self, dt):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Å–∏–≥–Ω–∞–ª–∞"""
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å —Å–∏–≥–Ω–∞–ª–∞ –æ—Ç –∞—É–¥–∏–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
        if hasattr(self.audio_processor, 'last_rms'):
            level = self.audio_processor.last_rms
            self.signal_indicator.set_level(level)
    
    def update_device_lists(self, *args):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤–≤–æ–¥–∞/–≤—ã–≤–æ–¥–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤–≤–æ–¥–∞
            self.input_devices = self.audio_processor.get_input_devices()
            
            if self.input_devices:
                # –ó–∞–ø–æ–ª–Ω—è–µ–º –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤–≤–æ–¥–∞
                device_names = [device['name'] for device in self.input_devices]
                self.input_device_spinner.values = device_names
                
                # –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                if self.input_device_spinner.text == '–í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ':
                    self.input_device_spinner.text = device_names[0]
                    self.on_input_device_selected(self.input_device_spinner, device_names[0])
            else:
                self.status_label.text = '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤–≤–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'
        except Exception as e:
            self.status_label.text = f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤–≤–æ–¥–∞: {str(e)}'
            
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤—ã–≤–æ–¥–∞
            self.output_devices = self.audio_processor.get_output_devices()
            
            if self.output_devices:
                # –ó–∞–ø–æ–ª–Ω—è–µ–º –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤—ã–≤–æ–¥–∞
                device_names = [device['name'] for device in self.output_devices]
                self.output_device_spinner.values = device_names
                
                # –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                if self.output_device_spinner.text == '–í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ':
                    self.output_device_spinner.text = device_names[0]
                    self.on_output_device_selected(self.output_device_spinner, device_names[0])
            else:
                self.status_label.text = '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤—ã–≤–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'
        except Exception as e:
            self.status_label.text = f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤—ã–≤–æ–¥–∞: {str(e)}'
    
    def on_input_device_selected(self, spinner, text):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤–≤–æ–¥–∞"""
        try:
            # –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
            selected_device = next((device for device in self.input_devices if device['name'] == text), None)
            
            if selected_device:
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤
                num_channels = selected_device['maxInputChannels']
                print(f"–í—ã–±—Ä–∞–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {text} —Å {num_channels} –≤—Ö–æ–¥–Ω—ã–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
                channel_values = [f'–ö–∞–Ω–∞–ª {i+1}' for i in range(num_channels)]
                self.input_channel_spinner.values = channel_values
                
                # –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π –∫–∞–Ω–∞–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                if not self.input_channel_spinner.text in channel_values:
                    self.input_channel_spinner.text = channel_values[0]
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤–≤–æ–¥–∞
                self.audio_processor.set_input_device(selected_device['index'])
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                self.status_label.text = f'–í—ã–±—Ä–∞–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤–≤–æ–¥–∞: {text}'
        except Exception as e:
            self.status_label.text = f'–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤–≤–æ–¥–∞: {str(e)}'
    
    def on_output_device_selected(self, spinner, text):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤—ã–≤–æ–¥–∞"""
        try:
            # –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
            selected_device = next((device for device in self.output_devices if device['name'] == text), None)
            
            if selected_device:
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤—ã–≤–æ–¥–∞
                self.audio_processor.set_output_device(selected_device['index'])
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                self.status_label.text = f'–í—ã–±—Ä–∞–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤—ã–≤–æ–¥–∞: {text}'
        except Exception as e:
            self.status_label.text = f'–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤—ã–≤–æ–¥–∞: {str(e)}'
    
    def on_input_channel_selected(self, spinner, text):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞ –≤–≤–æ–¥–∞"""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –∫–∞–Ω–∞–ª–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ö–∞–Ω–∞–ª 1" -> 0)
            channel = int(text.split(' ')[1]) - 1
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–Ω–∞–ª –≤–≤–æ–¥–∞
            self.audio_processor.set_input_channel(channel)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            self.status_label.text = f'–í—ã–±—Ä–∞–Ω –∫–∞–Ω–∞–ª: {text}'
        except Exception as e:
            self.status_label.text = f'–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞: {str(e)}'
    
    def on_buffer_size_selected(self, spinner, text):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞ –±—É—Ñ–µ—Ä–∞"""
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–∫—Å—Ç –≤ —á–∏—Å–ª–æ
            buffer_size = int(text)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞
            self.audio_processor.set_buffer_size(buffer_size)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            self.status_label.text = f'–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞: {buffer_size}'
        except Exception as e:
            self.status_label.text = f'–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ –±—É—Ñ–µ—Ä–∞: {str(e)}'
    
    def on_low_latency_toggle(self, switch, value):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –Ω–∏–∑–∫–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏"""
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º –Ω–∏–∑–∫–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
            self.audio_processor.set_low_latency(value)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
            self.low_latency_label.text = '–í–∫–ª' if value else '–í—ã–∫–ª'
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            self.status_label.text = f'–†–µ–∂–∏–º –Ω–∏–∑–∫–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏: {"–≤–∫–ª—é—á–µ–Ω" if value else "–≤—ã–∫–ª—é—á–µ–Ω"}'
        except Exception as e:
            self.status_label.text = f'–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞: {str(e)}'
    
    def on_monitoring_toggle(self, switch, value):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            self.audio_processor.set_monitoring(value)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
            self.monitoring_label.text = '–í–∫–ª' if value else '–í—ã–∫–ª'
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            self.status_label.text = f'–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: {"–≤–∫–ª—é—á–µ–Ω" if value else "–≤—ã–∫–ª—é—á–µ–Ω"}'
        except Exception as e:
            self.status_label.text = f'–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {str(e)}'
    
    def on_volume_change(self, slider, value):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥—Ä–æ–º–∫–æ—Å—Ç–∏"""
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å
            self.audio_processor.set_monitoring_volume(value)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö)
            self.volume_label.text = f'{int(value * 100)}%'
        except Exception as e:
            self.status_label.text = f'–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥—Ä–æ–º–∫–æ—Å—Ç–∏: {str(e)}'
    
    def on_threshold_change(self, slider, value):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä–æ–≥–∞ –≥—Ä–æ–º–∫–æ—Å—Ç–∏"""
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ä–æ–≥
            self.audio_processor.set_threshold(value)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç (—Å –¥–≤—É–º—è –∑–Ω–∞–∫–∞–º–∏ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π)
            self.threshold_label.text = f'{value:.2f}'
        except Exception as e:
            self.status_label.text = f'–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ—Ä–æ–≥–∞: {str(e)}'
    
    def toggle_monitor(self, instance):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        if self.audio_processor.is_running:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
            self.audio_processor.stop()
            self.start_button.text = '–°—Ç–∞—Ä—Ç'
            self.status_label.text = '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'
        else:
            # –ó–∞–ø—É—Å–∫–∞–µ–º
            self.audio_processor.start()
            self.start_button.text = '–°—Ç–æ–ø'
            self.status_label.text = '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω'
    
    def on_audio_detected(self, timestamp, rms_value):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∑–≤—É–∫–∞"""
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        self.status_label.text = f'–û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–≤—É–∫: RMS={rms_value:.4f}'
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–≤—É–∫–∞
        print(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–≤—É–∫: RMS={rms_value:.4f}, –≤—Ä–µ–º—è={timestamp:.2f}")

class SettingsPopup(Popup):
    """–í—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    def __init__(self, app_instance, **kwargs):
        super(SettingsPopup, self).__init__(**kwargs)
        self.app = app_instance
        self.title = '–ù–ê–°–¢–†–û–ô–ö–ò'
        self.size_hint = (0.9, 0.9)
        self.auto_dismiss = False
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_layout = BoxLayout(orientation='vertical', spacing=10, padding=10)
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å —Ñ–æ–Ω–æ–º
        content = BoxLayout(orientation='vertical', spacing=10)
        with content.canvas.before:
            Color(*COLORS['dark'])
            RoundedRectangle(pos=content.pos, size=content.size, radius=[10])
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_box = BoxLayout(orientation='horizontal', size_hint_y=None, height=40)
        
        settings_title = Label(
            text='–ù–ê–°–¢–†–û–ô–ö–ò –ó–í–£–ö–ê',
            font_size='18sp',
            bold=True,
            color=COLORS['primary'],
            halign='center',
            valign='middle'
        )
        settings_title.bind(size=settings_title.setter('text_size'))
        title_box.add_widget(settings_title)
        
        content.add_widget(title_box)
        
        # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–æ–ª–ª–∏—Ä—É–µ–º—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
        scroll_view = ScrollView(do_scroll_x=False)
        settings_container = BoxLayout(orientation='vertical', spacing=10, padding=10, size_hint_y=None)
        settings_container.bind(minimum_height=settings_container.setter('height'))
        
        # –í—ã–±–æ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤–≤–æ–¥–∞
        input_device_layout = BoxLayout(orientation='horizontal', size_hint_y=None, height=50)
        input_device_layout.add_widget(Label(
            text='–í–•–û–î:',
            font_size='14sp',
            color=COLORS['text'],
            size_hint_x=0.3
        ))
        
        self.input_device_spinner = Spinner(
            text='–í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ',
            size_hint_x=0.7,
            background_color=COLORS['background'],
            color=COLORS['text']
        )
        self.input_device_spinner.bind(text=self.on_input_device_selected)
        input_device_layout.add_widget(self.input_device_spinner)
        
        settings_container.add_widget(input_device_layout)
        
        # –í—ã–±–æ—Ä –∫–∞–Ω–∞–ª–∞ –≤–≤–æ–¥–∞
        input_channel_layout = BoxLayout(orientation='horizontal', size_hint_y=None, height=50)
        input_channel_layout.add_widget(Label(
            text='–ö–ê–ù–ê–õ:',
            font_size='14sp',
            color=COLORS['text'],
            size_hint_x=0.3
        ))
        
        self.input_channel_spinner = Spinner(
            text='–ö–∞–Ω–∞–ª 1',
            size_hint_x=0.7,
            background_color=COLORS['background'],
            color=COLORS['text']
        )
        self.input_channel_spinner.bind(text=self.on_input_channel_selected)
        input_channel_layout.add_widget(self.input_channel_spinner)
        
        settings_container.add_widget(input_channel_layout)
        
        # –í—ã–±–æ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤—ã–≤–æ–¥–∞
        output_device_layout = BoxLayout(orientation='horizontal', size_hint_y=None, height=50)
        output_device_layout.add_widget(Label(
            text='–í–´–•–û–î:',
            font_size='14sp',
            color=COLORS['text'],
            size_hint_x=0.3
        ))
        
        self.output_device_spinner = Spinner(
            text='–í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ',
            size_hint_x=0.7,
            background_color=COLORS['background'],
            color=COLORS['text']
        )
        self.output_device_spinner.bind(text=self.on_output_device_selected)
        output_device_layout.add_widget(self.output_device_spinner)
        
        settings_container.add_widget(output_device_layout)
        
        # –†–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞ (–¥–ª—è –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–¥–µ—Ä–∂–∫–∏)
        buffer_size_layout = BoxLayout(orientation='horizontal', size_hint_y=None, height=50)
        buffer_size_layout.add_widget(Label(
            text='–ë–£–§–ï–†:',
            font_size='14sp',
            color=COLORS['text'],
            size_hint_x=0.3
        ))
        
        self.buffer_size_spinner = Spinner(
            text='128',
            values=['64', '128', '256', '512', '1024'],
            size_hint_x=0.7,
            background_color=COLORS['background'],
            color=COLORS['text']
        )
        self.buffer_size_spinner.bind(text=self.on_buffer_size_selected)
        buffer_size_layout.add_widget(self.buffer_size_spinner)
        
        settings_container.add_widget(buffer_size_layout)
        
        # –†–µ–∂–∏–º –Ω–∏–∑–∫–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
        low_latency_layout = BoxLayout(orientation='horizontal', size_hint_y=None, height=50)
        low_latency_layout.add_widget(Label(
            text='–ù–ò–ó–ö–ê–Ø –ó–ê–î–ï–†–ñ–ö–ê:',
            font_size='14sp',
            color=COLORS['text'],
            size_hint_x=0.7
        ))
        
        self.low_latency_switch = Switch(active=True, size_hint_x=0.3)
        self.low_latency_switch.bind(active=self.on_low_latency_toggle)
        low_latency_layout.add_widget(self.low_latency_switch)
        
        settings_container.add_widget(low_latency_layout)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        restart_info = Label(
            text='–ü–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ\n–ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥',
            font_size='14sp',
            color=COLORS['secondary'],
            size_hint_y=None,
            height=60,
            halign='center'
        )
        restart_info.bind(size=restart_info.setter('text_size'))
        settings_container.add_widget(restart_info)
        
        # –°—Ç–∞—Ç—É—Å
        self.status_label = Label(
            text='–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ',
            font_size='14sp',
            color=COLORS['text'],
            size_hint_y=None,
            height=50,
            halign='center'
        )
        self.status_label.bind(size=self.status_label.setter('text_size'))
        settings_container.add_widget(self.status_label)
        
        scroll_view.add_widget(settings_container)
        content.add_widget(scroll_view)
        
        # –ö–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É
        buttons_layout = BoxLayout(orientation='horizontal', size_hint_y=None, height=60, spacing=10)
        
        # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        save_btn = RockButton(
            text='–°–û–•–†–ê–ù–ò–¢–¨',
            size_hint_x=0.5,
            font_size='16sp',
            bold=True
        )
        save_btn.bind(on_press=self.save_settings)
        buttons_layout.add_widget(save_btn)
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        close_btn = RockButton(
            text='–ó–ê–ö–†–´–¢–¨',
            size_hint_x=0.5,
            font_size='16sp',
            bold=True
        )
        close_btn.bind(on_press=self.dismiss)
        buttons_layout.add_widget(close_btn)
        
        content.add_widget(buttons_layout)
        main_layout.add_widget(content)
        
        self.content = main_layout
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.load_settings()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        self.update_device_lists()
    
    def update_device_lists(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤–≤–æ–¥–∞/–≤—ã–≤–æ–¥–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤–≤–æ–¥–∞
            self.input_devices = self.app.audio_processor.get_input_devices()
            
            if self.input_devices:
                # –ó–∞–ø–æ–ª–Ω—è–µ–º –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤–≤–æ–¥–∞
                device_names = [device['name'] for device in self.input_devices]
                self.input_device_spinner.values = device_names
                
                # –í—ã–±–∏—Ä–∞–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–ª–∏ –ø–µ—Ä–≤–æ–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                if self.app.settings.get('input_device') in device_names:
                    self.input_device_spinner.text = self.app.settings['input_device']
                elif self.input_device_spinner.text not in device_names:
                    self.input_device_spinner.text = device_names[0]
                    
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
                self.update_channel_list()
            else:
                self.status_label.text = '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤–≤–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'
        except Exception as e:
            self.status_label.text = f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤–≤–æ–¥–∞: {str(e)}'
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤—ã–≤–æ–¥–∞
            self.output_devices = self.app.audio_processor.get_output_devices()
            
            if self.output_devices:
                # –ó–∞–ø–æ–ª–Ω—è–µ–º –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤—ã–≤–æ–¥–∞
                device_names = [device['name'] for device in self.output_devices]
                self.output_device_spinner.values = device_names
                
                # –í—ã–±–∏—Ä–∞–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–ª–∏ –ø–µ—Ä–≤–æ–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                if self.app.settings.get('output_device') in device_names:
                    self.output_device_spinner.text = self.app.settings['output_device']
                elif self.output_device_spinner.text not in device_names:
                    self.output_device_spinner.text = device_names[0]
            else:
                self.status_label.text = '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤—ã–≤–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'
        except Exception as e:
            self.status_label.text = f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤—ã–≤–æ–¥–∞: {str(e)}'
    
    def update_channel_list(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"""
        if not hasattr(self, 'input_device_spinner') or not self.input_device_spinner.text:
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
        selected_device = None
        for device in self.input_devices:
            if device['name'] == self.input_device_spinner.text:
                selected_device = device
                break
        
        if not selected_device:
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤
        num_channels = selected_device.get('maxInputChannels', 1)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
        channel_values = [f'–ö–∞–Ω–∞–ª {i+1}' for i in range(num_channels)]
        self.input_channel_spinner.values = channel_values
        
        # –í—ã–±–∏—Ä–∞–µ–º –∫–∞–Ω–∞–ª –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–ª–∏ –ø–µ—Ä–≤—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        saved_channel = self.app.settings.get('input_channel')
        if saved_channel is not None and f'–ö–∞–Ω–∞–ª {saved_channel+1}' in channel_values:
            self.input_channel_spinner.text = f'–ö–∞–Ω–∞–ª {saved_channel+1}'
        elif not self.input_channel_spinner.text in channel_values and channel_values:
            self.input_channel_spinner.text = channel_values[0]
    
    def on_input_device_selected(self, spinner, text):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤–≤–æ–¥–∞"""
        try:
            # –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
            selected_device = next((device for device in self.input_devices if device['name'] == text), None)
            
            if selected_device:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
                self.update_channel_list()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                self.status_label.text = f'–í—ã–±—Ä–∞–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤–≤–æ–¥–∞: {text}'
        except Exception as e:
            self.status_label.text = f'–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤–≤–æ–¥–∞: {str(e)}'
    
    def on_output_device_selected(self, spinner, text):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤—ã–≤–æ–¥–∞"""
        try:
            # –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
            selected_device = next((device for device in self.output_devices if device['name'] == text), None)
            
            if selected_device:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                self.status_label.text = f'–í—ã–±—Ä–∞–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤—ã–≤–æ–¥–∞: {text}'
        except Exception as e:
            self.status_label.text = f'–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤—ã–≤–æ–¥–∞: {str(e)}'
    
    def on_input_channel_selected(self, spinner, text):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞ –≤–≤–æ–¥–∞"""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –∫–∞–Ω–∞–ª–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ö–∞–Ω–∞–ª 1" -> 0)
            channel = int(text.split(' ')[1]) - 1
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            self.status_label.text = f'–í—ã–±—Ä–∞–Ω –∫–∞–Ω–∞–ª: {text}'
        except Exception as e:
            self.status_label.text = f'–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞: {str(e)}'
    
    def on_buffer_size_selected(self, spinner, text):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞ –±—É—Ñ–µ—Ä–∞"""
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–∫—Å—Ç –≤ —á–∏—Å–ª–æ
            buffer_size = int(text)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            self.status_label.text = f'–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞: {buffer_size}'
        except Exception as e:
            self.status_label.text = f'–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ –±—É—Ñ–µ—Ä–∞: {str(e)}'
    
    def on_low_latency_toggle(self, switch, value):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –Ω–∏–∑–∫–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏"""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            self.status_label.text = f'–†–µ–∂–∏–º –Ω–∏–∑–∫–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏: {"–≤–∫–ª—é—á–µ–Ω" if value else "–≤—ã–∫–ª—é—á–µ–Ω"}'
        except Exception as e:
            self.status_label.text = f'–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞: {str(e)}'
    
    def load_settings(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        if 'buffer_size' in self.app.settings:
            self.buffer_size_spinner.text = str(self.app.settings['buffer_size'])
        
        if 'low_latency' in self.app.settings:
            self.low_latency_switch.active = self.app.settings['low_latency']
    
    def save_settings(self, instance):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤–≤–æ–¥–∞
            input_device = None
            for device in self.input_devices:
                if device['name'] == self.input_device_spinner.text:
                    input_device = device
                    break
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤—ã–≤–æ–¥–∞
            output_device = None
            for device in self.output_devices:
                if device['name'] == self.output_device_spinner.text:
                    output_device = device
                    break
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª
            channel = int(self.input_channel_spinner.text.split(' ')[1]) - 1
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞
            buffer_size = int(self.buffer_size_spinner.text)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∂–∏–º –Ω–∏–∑–∫–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
            low_latency = self.low_latency_switch.active
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
            self.app.settings.update({
                'input_device': self.input_device_spinner.text,
                'input_device_index': input_device['index'] if input_device else 0,
                'output_device': self.output_device_spinner.text,
                'output_device_index': output_device['index'] if output_device else 0,
                'input_channel': channel,
                'buffer_size': buffer_size,
                'low_latency': low_latency
            })
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            self.app.apply_settings()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ñ–∞–π–ª
            self.app.save_settings()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            self.status_label.text = '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã'
        except Exception as e:
            self.status_label.text = f'–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {str(e)}'

class GuitarTrainerApp(App):
    """–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Ä–∏—Ç–º–∞ –Ω–∞ –≥–∏—Ç–∞—Ä–µ –≤ —Ä–æ–∫-—Å—Ç–∏–ª–µ"""
    def build(self):
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–∫–Ω–∞
        self.title = 'ROCK GUITAR RHYTHM TRAINER'
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.settings = self.load_settings()
        
        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        root = BoxLayout(orientation='vertical', padding=10, spacing=10)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        with root.canvas.before:
            # –¢–µ–º–Ω—ã–π —Ñ–æ–Ω
            Color(0.1, 0.1, 0.12, 1)
            self.bg_rect = Rectangle(pos=root.pos, size=root.size)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç "—à—É–º–∞" –¥–ª—è —Ç–µ–∫—Å—Ç—É—Ä—ã
            for _ in range(100):
                x = random.randint(0, 100) / 100.0 * root.width
                y = random.randint(0, 100) / 100.0 * root.height
                size = random.randint(1, 3)
                alpha = random.randint(1, 10) / 20.0
                Color(1, 1, 1, alpha)
                Rectangle(pos=(x, y), size=(size, size))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–æ–Ω–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
        root.bind(size=self._update_bg_rect, pos=self._update_bg_rect)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        header = BoxLayout(orientation='horizontal', size_hint_y=None, height=80)
        
        # –õ–æ–≥–æ—Ç–∏–ø (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)
        logo_box = BoxLayout(size_hint_x=0.2)
        with logo_box.canvas:
            # –†–∏—Å—É–µ–º —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –≥–∏—Ç–∞—Ä—É
            Color(*COLORS['primary'])
            Line(points=[20, 20, 60, 60, 20, 60, 60, 20], width=2)
            Ellipse(pos=(30, 30), size=(20, 20))
        header.add_widget(logo_box)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = Label(
            text='ROCK GUITAR RHYTHM TRAINER',
            font_size='28sp',
            bold=True,
            color=COLORS['primary'],
            size_hint_x=0.8
        )
        header.add_widget(title_label)
        
        root.add_widget(header)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç - —Ç–æ–ª—å–∫–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —É—Ä–æ–≤–Ω—è —Å–∏–≥–Ω–∞–ª–∞
        content = BoxLayout(orientation='vertical', spacing=10)
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —É—Ä–æ–≤–Ω—è —Å–∏–≥–Ω–∞–ª–∞
        self.signal_indicator = SignalLevelIndicator()
        content.add_widget(self.signal_indicator)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä–æ–ª–ª–∏–Ω–≥ –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        scroll_view = ScrollView(do_scroll_x=False)
        scroll_view.add_widget(content)
        root.add_widget(scroll_view)
        
        # –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –∫–Ω–æ–ø–∫–∞–º–∏
        bottom_panel = BoxLayout(orientation='horizontal', size_hint_y=None, height=60, spacing=10)
        
        # –ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        settings_btn = RockButton(
            text='–ù–ê–°–¢–†–û–ô–ö–ò',
            size_hint_x=0.5,
            font_size='16sp',
            bold=True
        )
        settings_btn.bind(on_press=self.show_settings)
        bottom_panel.add_widget(settings_btn)
        
        # –ö–Ω–æ–ø–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        self.monitoring_btn = RockButton(
            text='–ú–û–ù–ò–¢–û–†–ò–ù–ì –í–´–ö–õ',
            size_hint_x=0.5,
            font_size='16sp',
            bold=True
        )
        self.monitoring_btn.bind(on_press=self.toggle_monitoring)
        bottom_panel.add_widget(self.monitoring_btn)
        
        root.add_widget(bottom_panel)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
        self.audio_processor = AudioProcessor(callback=self.on_audio_detected)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.apply_settings()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞—É–¥–∏–æ
        self.audio_processor.start()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Å–∏–≥–Ω–∞–ª–∞
        Clock.schedule_interval(self.update_signal_level, 0.05)
        
        return root
    
    def _update_bg_rect(self, instance, value):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞"""
        if hasattr(self, 'bg_rect'):
            self.bg_rect.pos = instance.pos
            self.bg_rect.size = instance.size
    
    def update_signal_level(self, dt):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Å–∏–≥–Ω–∞–ª–∞"""
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å —Å–∏–≥–Ω–∞–ª–∞ –æ—Ç –∞—É–¥–∏–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
        if hasattr(self.audio_processor, 'last_rms'):
            level = self.audio_processor.last_rms
            self.signal_indicator.set_level(level)
    
    def on_audio_detected(self, timestamp, amplitude):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∑–≤—É–∫–∞ —Å –≥–∏—Ç–∞—Ä—ã"""
        pass
    
    def show_settings(self, instance):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        settings_popup = SettingsPopup(self)
        settings_popup.open()
    
    def toggle_monitoring(self, instance):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        if self.audio_processor.is_monitoring:
            # –í—ã–∫–ª—é—á–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            self.audio_processor.toggle_monitoring()
            self.monitoring_btn.text = '–ú–û–ù–ò–¢–û–†–ò–ù–ì –í–´–ö–õ'
        else:
            # –í–∫–ª—é—á–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            if self.audio_processor.toggle_monitoring():
                self.monitoring_btn.text = '–ú–û–ù–ò–¢–û–†–ò–ù–ì –í–ö–õ'
            else:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –≤–∫–ª—é—á–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
                self.monitoring_btn.text = '–û–®–ò–ë–ö–ê –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê'
    
    def load_settings(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ —Ñ–∞–π–ª–∞"""
        settings_file = os.path.join(os.path.dirname(__file__), 'settings.json')
        default_settings = {
            'input_device': '',
            'input_device_index': 0,
            'output_device': '',
            'output_device_index': 0,
            'input_channel': 0,
            'buffer_size': 128,
            'low_latency': True
        }
        
        try:
            if os.path.exists(settings_file):
                with open(settings_file, 'r') as f:
                    settings = json.load(f)
                    # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                    return {**default_settings, **settings}
            else:
                return default_settings
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {str(e)}")
            return default_settings
    
    def save_settings(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ —Ñ–∞–π–ª"""
        settings_file = os.path.join(os.path.dirname(__file__), 'settings.json')
        try:
            with open(settings_file, 'w') as f:
                json.dump(self.settings, f, indent=4)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {str(e)}")
    
    def apply_settings(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫ –∞—É–¥–∏–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä—É"""
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤–≤–æ–¥–∞
            if 'input_device_index' in self.settings:
                self.audio_processor.set_input_device(self.settings['input_device_index'])
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤—ã–≤–æ–¥–∞
            if 'output_device_index' in self.settings:
                self.audio_processor.set_output_device(self.settings['output_device_index'])
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–Ω–∞–ª –≤–≤–æ–¥–∞
            if 'input_channel' in self.settings:
                self.audio_processor.set_input_channel(self.settings['input_channel'])
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞
            if 'buffer_size' in self.settings:
                was_monitoring = self.audio_processor.is_monitoring
                
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞—É–¥–∏–æ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
                self.audio_processor.stop()
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞
                self.audio_processor.block_size = self.settings['buffer_size']
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º –Ω–∏–∑–∫–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
                self.audio_processor.use_low_latency = self.settings.get('low_latency', True)
                
                # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∞—É–¥–∏–æ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
                self.audio_processor.start()
                
                # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∏—Ç—å –µ–≥–æ –≤—Ä—É—á–Ω—É—é
                if was_monitoring:
                    print("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±—ã–ª –≤–∫–ª—é—á–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∫–ª—é—á–∏—Ç–µ –µ–≥–æ —Å–Ω–æ–≤–∞ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫.")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {str(e)}")

if __name__ == '__main__':
    GuitarTrainerApp().run() 